generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED

  @@map("verification_status")
}

enum PasswordResetStatus {
  PENDING
  IDLE

  @@map("password_reset_status")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  EXIT_REQUESTED
  EXIT_APPROVED
  UNPAID
  PAID

  @@map("request_status")
}

enum VehicleStatus {
  PENDING
  APPROVED

  @@map("vehicle_status")
}

enum NotificationType {
  SLOT_REQUEST
  SLOT_APPROVED
  SLOT_REJECTED
  EXIT_REQUESTED
  EXIT_APPROVED
  PAYMENT_DUE
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(USER)
  isVerified    Boolean   @default(false)
  verificationToken String?
  resetToken    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  parkingEntries ParkingEntry[]
  vehicles      Vehicle[]
  parkingRequests ParkingRequest[]
  notifications Notification[]

    @@map("users")
}

model Vehicle {
  id          String        @id @default(uuid())
  plateNumber String        @unique @map("plate_number")
  color       String
  status      VehicleStatus @default(PENDING)
  userId      String        @map("user_id")
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  vehicleRequests ParkingRequest[]

  @@map("vehicles")
}

model Parking {
  id              String    @id @default(uuid())
  code            String    @unique
  name            String
  totalSpaces     Int
  availableSpaces Int
  location        String
  feePerHour      Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  parkingEntries  ParkingEntry[]
  parkingRequests ParkingRequest[]

  @@map("parkings")
}

model ParkingRequest {
  id              String        @id @default(uuid())
  userId          String
  vehicleId       String
  parkingId       String
  status          RequestStatus @default(PENDING)
  checkIn         DateTime?
  checkOut        DateTime?
  requestedAt     DateTime      @default(now())
  approvedAt      DateTime?
  rejectedAt      DateTime?
  exitRequestedAt DateTime?
  exitApprovedAt  DateTime?
  amountToPay     Float?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id])
  vehicle         Vehicle       @relation(fields: [vehicleId], references: [id])
  parking         Parking       @relation(fields: [parkingId], references: [id])

  @@map("parking_requests")
}

model Notification {
  id          String           @id @default(uuid())
  userId      String          @map("user_id")
  type        NotificationType
  message     String
  isRead      Boolean         @default(false) @map("is_read")
  metadata    Json?           // Store additional data like amount, etc.
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  user        User            @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model ParkingEntry {
  id            String    @id @default(uuid())
  plateNumber   String
  parkingId     String
  userId        String
  entryDateTime DateTime  @default(now())
  exitDateTime  DateTime?
  chargedAmount Float     @default(0)
  parking       Parking   @relation(fields: [parkingId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
